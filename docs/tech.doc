.sh 1 "Virtual Buffering"

What are virtual buffers? A computer generally has a limited amount of
"core" memory. Core memory is the actual memory available in the
computer. For a PC this is usually 640 kilobytes (640k).

Because a file or combination of files can be larger than 640k, some way
is needed to allow the editor to "pretend" it has more memory than it
really does. Most Unix systems (SYS3 is an exception) have virtual
buffering built in to the O/S. For these machines, Zedit does not
virtual buffering (although it can be turned on if wanted). However, PCs
have very limited memory. For these machines, virtual buffering is a
must.

The following description is technical in nature and is only necessary
if you want to optimize the virtual buffering for your specific hardware.

So where does this "virtual" memory come from? It comes from the
infamous "swap file" which is stored on disk, extended memory, or
expanded memory. Zedit uses a "paged" memory scheme. All buffers are
made up of one or more pages that are 1k (1024 bytes) long. A set number
of "Pages in Memory" (PIMs) are allocated in core memory and the rest of
the pages are kept in the swap file. The number of default PIMs is 100.

When Zedit goes from one page to the next, one of two things can happen.
The page can already be in a PIM, which is great. If it isn't, one of
the PIMs is written to the swap file and Zedit reads the page it needs
from the swap file into the PIM it just freed up. This is why the disk
drive light may come on while editing. Obviously, the more PIMs, the
fewer times the editor will have to go to the swap file and the faster
the editing.

To keep track of where the pages are, in memory or in the swap file, a
list of the pages in the swap file is kept in memory. Every page has a
position in the swap file, even if it is currently in memory. The list
slowly takes up core memory. This is why the amount of free memory goes
down the larger the buffers get. (Use the Stats command to observe
this.) If Zedit runs out of core memory for the list, a PIM will be
deallocated to free up some core memory. If the number of PIMs hits one,
Zedit will display an "FATAL ERROR: Out of memory" message and perform
an Exit command. This generally won't happen....

Note that if the swap file is getting full, deleting some buffers will
free up space. The buffers are not stored contiguously in the swap file
but are assigned 1k blocks on a first come first served basis.

The limiting factor on how much buffer space the editor has is the size
of the swap map. The larger the swap map, the more virtual buffer space
there is. Obviously, the swap file cannot be larger than the disk size
or the maximum file size on a given system. Zedit comes with a default
of 256 bytes of swap map space, which corresponds to 2M (258 * 8k) of
swap file space. This may be too little, or too much, depending on your
system. With the "-s" option, you can define how much swap file space
you want. 

This option expects a number after the "-s". This number is the size of
the "swap map" used by Zedit and is in 100k chunks. 

The "-p" option allows you to define how many PIMs are kept in core
memory. For example "-p256" would set aside room for 256 PIMs. The
larger this number, the faster the editor is, especially for large
files. However, if this number is too big you may not be able to shell
out of the editor and/or you may not have enough memory to execute
programs in the shell.

For every PIM, the editor needs 22 bytes for a header and 1k for the
actual text. The editor MUST be able to allocate the number of PIMs * 22
bytes of memory. It then tries to allocate the 1k text pages. If it runs
out of memory it will limit the number of PIMs.

Some of the editor commands, most notably file name completion, require
core memory to execute. If you select too high a PIM count, these
commands may not run correctly.


.sh 2 "Fastread"

On PCs, loading large files is very slow. A solution to this is Fastread
buffers. For files greater than a set limit, FastSize, the Fastread
routine is called to read in the file. Instead of loading the entire
file into the swap file, it reserves space in the swapfile but marks the
page as being in the input file. This means that only the first page
need be read. This gives all files that are read with Fastread a flat,
approx. 3 second, open time. However, it means that the input file is
kept open. This requires one file descriptor per Fastread buffer. You
are limited, by Zedit, to 10 Fastread buffers. Fastread buffers are
marked with an F after the file name in the mode line.

The FastSize limit is user definable with the Set Variable command. The
size is in kilobytes (K). A FastSize of 0K turns off this feature. The
default is 100K.

Because Fastread buffers do not actually read the input file, the number
of lines per 'page' is unknown. This means the first access to or
through every page will be slowed down while it counts the line. This
means a Goto will be slow the first time though a file and fast the
second. It also means that if LINES is set and you perform a End of
Buffer command, the first time is will be  S L O W. Subsequent calls
will be fast. The List Buffers command will also be affected.

Note that when a Fastread buffer if written, it must be "reread" to get
the new file locations. Because this is mainly an in-memory operation,
the time overhead is minimal.


.sh 2 "The Stats Command"

The Stats command gives useful information about Zedit if you know how
to read it. Hopefully, this section will tell you how.

If you do not have virtual buffering, the stats command is as shown
below:

Free Memory 25518k Buffers: 5 Pages: 25

The "Free Memory" is the amount of memory left in the computer for Zedit
to use. This number is in kilobytes (1024 bytes). Buffers is the
number of buffers you have, not counting the Kill Buffer. Pages is the
number of 1k pages that Zedit has allocated.

If you have virtual buffering, Zedit displays more information:

Free Memory: 310k Buffers: 2 Buffer Used: 95k (4%) PIMs: 100

Free Memory is the amount of memory left in the computer for Zedit
to use. This number is in kilobytes (1024 bytes). It is possible to have
0k and still use Zedit. If the "Free Memory" goes to 0k, Zedit will try
to free a "Page In Memory" (PIM) to get more space to continue. If there
is only one PIM left, Zedit will perform an Exit command.

PIMs shows how many PIMs are left. It is usually 100.

Buffer Used shows the amount of buffer space used. Zedit has by default
2048k (2097152 bytes) of buffer space. The percent is a rough
approximation of how much of this buffer space is used. If this number
gets up in the 90% range, start thinking of deleting buffers or you may
get a "Swap File Full" error.
